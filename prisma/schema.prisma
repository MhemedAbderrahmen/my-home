// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum NotificationType {
    DEFAULT
    INVITE
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model Groceries {
    id             Int       @id @default(autoincrement())
    itemName       String    @map("name")
    quantity       Int       @default(0)
    unit           String    @default("")
    threshold      Int       @default(0)
    expirationDate DateTime?
    archived       Boolean   @default(false)
    shoppingListId Int?
    inventoryId    Int?
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt

    ShoppingList ShoppingList? @relation(fields: [shoppingListId], references: [id])
    Inventory    Inventory?    @relation(fields: [inventoryId], references: [id])

    @@index([itemName])
}

model ShoppingList {
    id          Int         @id @default(autoincrement())
    userId      String
    name        String
    description String
    paid        Boolean     @default(false)
    payment     Int         @default(0)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    groceries   Groceries[]

    @@index([id])
}

model Inventory {
    id        Int      @id @default(autoincrement())
    userId    String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Groceries Groceries[]
    household Household?
}

model User {
    id              Int     @id @default(autoincrement())
    clerkId         String  @unique
    username        String  @unique
    email           String
    imageUrl        String
    firstTimeSignIn Boolean @default(true)
    description     String? @default("")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    household   Household[]
    PartnerCode PartnerCode[]

    sentInvites     Invitation[] @relation("to")
    recievedInvites Invitation[] @relation("sender")

    sentNotifications     Notifications[] @relation("to")
    recievedNotifications Notifications[] @relation("sender")

    myPartnerships Partnership? @relation("user_1")
    partnership    Partnership? @relation("user_2")
}

model Partnership {
    id       Int    @id @default(autoincrement())
    user_1Id String @unique
    user_2Id String @unique
    user_1   User   @relation("user_1", fields: [user_1Id], references: [clerkId])
    user_2   User   @relation("user_2", fields: [user_2Id], references: [clerkId])
}

model Household {
    id          Int        @id @default(autoincrement())
    inventoryId Int        @unique
    userId      String
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    Inventory   Inventory  @relation(fields: [inventoryId], references: [id])
    User        User       @relation(fields: [userId], references: [clerkId])
    Expenses    Expenses[]
}

model PartnerCode {
    id        Int      @id @default(autoincrement())
    code      String   @unique
    userId    String
    isExpired Boolean
    expireAt  DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    creator   User     @relation(fields: [userId], references: [clerkId])
}

model Expenses {
    id          Int       @id @default(autoincrement())
    householdId Int
    household   Household @relation(fields: [householdId], references: [id])
    total       Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Notifications {
    id   Int              @id @default(autoincrement())
    type NotificationType @default(DEFAULT)

    senderId String
    sender   User   @relation("sender", fields: [senderId], references: [clerkId])
    userId   String
    user     User   @relation("to", fields: [userId], references: [clerkId])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Invitation {
    id Int @id @default(autoincrement())

    senderId String
    sender   User   @relation("sender", fields: [senderId], references: [clerkId])
    userId   String
    user     User   @relation("to", fields: [userId], references: [clerkId])
}
